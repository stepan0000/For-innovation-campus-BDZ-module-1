//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
import java.util.Scanner;
import java.lang.Math;

public class Main {
    /*

    При сложении двух двоичных чисел вручную мы учитываем биты переноса и складываем их одновременно.
    Но чтобы сделать то же самое в программе, нам нужно выполнить множество проверок.
    Рекурсивное решение можно представить как сложение переноса и a^b (двух входных данных) до тех пор, пока перенос не станет равным 0.


    Сумму двух битов можно получить, выполнив операцию XOR (^) над двумя битами.
    Бит переноса можно получить, выполнив операцию AND (&) над двумя битами.
    Выше приведена простая логика полусумматора, которую можно использовать для сложения 2 отдельных битов.
    Мы можем расширить эту логику для целых чисел. Если у x и y нет установленных битов в одной и той же позиции (позициях),
    то побитовое XOR (^) из x и y дает сумму x и y . Для включения битов общего набора также используется побитовое И (&).
    Побитовое И из x и y дает все биты переноса. Мы вычисляем (x & y) << 1 и прибавляем к x ^ y, чтобы получить нужный результат.
    Одно важное замечание: если (x & y) становится равным 0, то результатом будет x ^ y.
     */


    public static int add (int a,int b) {
        int keep = (a & b) << 1;
        int res = a^b;

        if (keep==0) {
            return res;
        };

        return add(keep,res);
    }

    public static void main(String[] args) {

        Scanner scanner = new Scanner (System.in);

        int a = scanner.nextInt();
        int b = scanner.nextInt();

        int r = Main.add(a,b);

        System.out.println(r);



    }
}